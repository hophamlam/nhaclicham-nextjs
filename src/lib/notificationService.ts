/**
 * Service x·ª≠ l√Ω logic th√¥ng b√°o v√† l·∫∑p l·∫°i √¢m l·ªãch
 */

import { LunarService } from "./lunarService";
import { addYears, format } from "date-fns";

export interface NotificationRepeatConfig {
  id: string;
  user_id: string;
  event_id: string;
  lunar_repeat_yearly: boolean;
  advance_days: number;
  provider_id: string;
  note?: string;
}

export interface LunarNotificationEvent {
  lunar_day: number;
  lunar_month: number;
  lunar_year: number;
  is_leap_month: boolean;
  title: string;
  description?: string;
}

export class NotificationService {
  /**
   * T√≠nh to√°n ng√†y th√¥ng b√°o ti·∫øp theo cho lunar event v·ªõi yearly repeat
   * @param event - Th√¥ng tin event √¢m l·ªãch
   * @param config - C·∫•u h√¨nh th√¥ng b√°o
   * @param fromYear - NƒÉm b·∫Øt ƒë·∫ßu t√≠nh (m·∫∑c ƒë·ªãnh l√† nƒÉm hi·ªán t·∫°i)
   */
  static calculateNextLunarNotification(
    event: LunarNotificationEvent,
    config: NotificationRepeatConfig,
    fromYear?: number
  ): {
    nextSolarDate: Date;
    nextLunarYear: number;
    isValid: boolean;
    error?: string;
  } {
    try {
      const currentYear = fromYear || new Date().getFullYear();
      const today = new Date();

      // Th·ª≠ convert nƒÉm hi·ªán t·∫°i tr∆∞·ªõc
      let nextYear = currentYear;
      let nextSolarDate: Date;
      let attempts = 0;
      const maxAttempts = 5; // Tr√°nh infinite loop

      while (attempts < maxAttempts) {
        try {
          // Convert lunar date sang solar cho nƒÉm nextYear
          nextSolarDate = LunarService.convertLunarToSolar(
            event.lunar_day,
            event.lunar_month,
            nextYear,
            event.is_leap_month
          );

          // Tr·ª´ advance_days ƒë·ªÉ t√≠nh ng√†y th√¥ng b√°o
          const notificationDate = new Date(nextSolarDate);
          notificationDate.setDate(
            notificationDate.getDate() - config.advance_days
          );

          // N·∫øu ng√†y th√¥ng b√°o ƒë√£ qua, th·ª≠ nƒÉm ti·∫øp theo
          if (notificationDate <= today) {
            nextYear++;
            attempts++;
            continue;
          }

          return {
            nextSolarDate: notificationDate,
            nextLunarYear: nextYear,
            isValid: true,
          };
        } catch (error) {
          // NƒÉm n√†y kh√¥ng c√≥ th√°ng nhu·∫≠n t∆∞∆°ng ·ª©ng, th·ª≠ nƒÉm ti·∫øp theo
          nextYear++;
          attempts++;
        }
      }

      return {
        nextSolarDate: new Date(),
        nextLunarYear: currentYear,
        isValid: false,
        error: "Kh√¥ng th·ªÉ t√¨m ƒë∆∞·ª£c ng√†y th√¥ng b√°o ti·∫øp theo trong 5 nƒÉm t·ªõi",
      };
    } catch (error) {
      return {
        nextSolarDate: new Date(),
        nextLunarYear: fromYear || new Date().getFullYear(),
        isValid: false,
        error: `L·ªói t√≠nh to√°n: ${error}`,
      };
    }
  }

  /**
   * T·∫°o description cho notification k·∫ø ti·∫øp
   * @param originalTitle - Ti√™u ƒë·ªÅ notification g·ªëc
   * @param nextSolarDate - Ng√†y d∆∞∆°ng l·ªãch k·∫ø ti·∫øp
   * @param nextLunarYear - NƒÉm √¢m l·ªãch k·∫ø ti·∫øp
   */
  static generateNextNotificationDescription(
    originalTitle: string,
    nextSolarDate: Date,
    nextLunarYear: number
  ): string {
    const solarDateStr = format(nextSolarDate, "dd/MM/yyyy");

    return [
      originalTitle,
      "",
      `üîÑ L·∫∑p l·∫°i h√†ng nƒÉm theo √¢m l·ªãch`,
      `üìÖ Th√¥ng b√°o k·∫ø ti·∫øp: ${solarDateStr}`,
      `üåô NƒÉm √¢m l·ªãch: ${nextLunarYear}`,
    ].join("\n");
  }

  /**
   * Ki·ªÉm tra xem notification c√≥ c·∫ßn t·∫°o instance ti·∫øp theo kh√¥ng
   * @param config - C·∫•u h√¨nh notification
   * @param lastTriggeredYear - NƒÉm cu·ªëi ƒë∆∞·ª£c trigger (optional)
   */
  static shouldCreateNextInstance(
    config: NotificationRepeatConfig,
    lastTriggeredYear?: number
  ): boolean {
    if (!config.lunar_repeat_yearly) {
      return false;
    }

    const currentYear = new Date().getFullYear();

    // N·∫øu ch∆∞a c√≥ l·ªãch s·ª≠ trigger, ho·∫∑c ƒë√£ qua nƒÉm cu·ªëi trigger
    return !lastTriggeredYear || lastTriggeredYear < currentYear;
  }

  /**
   * Batch t·∫°o notifications cho t·∫•t c·∫£ lunar repeat yearly settings
   * @param supabaseClient - Client ƒë·ªÉ query database
   * @param targetYear - NƒÉm target ƒë·ªÉ t·∫°o notifications (m·∫∑c ƒë·ªãnh nƒÉm sau)
   */
  static async batchCreateYearlyLunarNotifications(
    supabaseClient: any, // Type s·∫Ω ƒë∆∞·ª£c define t·ª´ Supabase client
    targetYear?: number
  ): Promise<{
    success: number;
    failed: number;
    errors: string[];
  }> {
    const year = targetYear || new Date().getFullYear() + 1;
    const results = { success: 0, failed: 0, errors: [] as string[] };

    try {
      // Query t·∫•t c·∫£ notification settings c√≥ lunar_repeat_yearly = true
      const { data: lunarRepeats, error: queryError } = await supabaseClient
        .from("notification_settings")
        .select(
          `
          id,
          user_id,
          event_id,
          advance_days,
          provider_id,
          note,
          lunar_repeat_yearly,
          events!inner(
            lunar_day,
            lunar_month,
            is_leap_month,
            title,
            description
          )
        `
        )
        .eq("lunar_repeat_yearly", true)
        .eq("is_enabled", true);

      if (queryError) {
        results.errors.push(`Query error: ${queryError.message}`);
        return results;
      }

      if (!lunarRepeats || lunarRepeats.length === 0) {
        return results;
      }

      // Process t·ª´ng notification setting
      for (const setting of lunarRepeats) {
        try {
          const event = setting.events;

          // T√≠nh ng√†y th√¥ng b√°o cho nƒÉm target
          const nextNotification = this.calculateNextLunarNotification(
            {
              lunar_day: event.lunar_day,
              lunar_month: event.lunar_month,
              lunar_year: year,
              is_leap_month: event.is_leap_month,
              title: event.title,
              description: event.description,
            },
            {
              id: setting.id,
              user_id: setting.user_id,
              event_id: setting.event_id,
              lunar_repeat_yearly: setting.lunar_repeat_yearly,
              advance_days: setting.advance_days,
              provider_id: setting.provider_id,
              note: setting.note,
            },
            year
          );

          if (!nextNotification.isValid) {
            results.failed++;
            results.errors.push(
              `Failed to calculate next notification for setting ${setting.id}: ${nextNotification.error}`
            );
            continue;
          }

          // T·∫°o notification event m·ªõi cho nƒÉm target
          // Logic n√†y s·∫Ω ƒë∆∞·ª£c implement khi integrate v·ªõi notification system th·ª±c t·∫ø

          results.success++;
        } catch (error) {
          results.failed++;
          results.errors.push(
            `Error processing setting ${setting.id}: ${error}`
          );
        }
      }

      return results;
    } catch (error) {
      results.errors.push(`Batch process error: ${error}`);
      return results;
    }
  }
}

/**
 * Hook ƒë·ªÉ s·ª≠ d·ª•ng trong React components
 */
export function useNotificationService() {
  return {
    calculateNextLunarNotification:
      NotificationService.calculateNextLunarNotification,
    generateNextNotificationDescription:
      NotificationService.generateNextNotificationDescription,
    shouldCreateNextInstance: NotificationService.shouldCreateNextInstance,
  };
}
