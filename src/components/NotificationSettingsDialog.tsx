"use client";

import { useEffect, useState } from "react";
import { createClient } from "@/lib/supabase-client";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  ArrowLeft,
  Save,
  Info,
  Clock,
  Plus,
  Copy,
  Trash2,
  Settings,
  Calendar,
} from "lucide-react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { UnifiedDatePicker } from "@/components/ui/unified-date-picker";
import { LunarService } from "@/lib/lunarService";
import { addDays, format } from "date-fns";
import { type EventTemplate } from "./TemplateSelectionDialog";
import { type EventInfo } from "./EventInfoDialog";
import { type LunarDate } from "@/components/ui/lunar-date-picker";
import toast from "react-hot-toast";

// Enum cho loại notification
type NotificationType = "solar" | "lunar";

interface NotificationSetting {
  type: NotificationType; // 'solar' hoặc 'lunar'
  advanceDays: number;
  note: string;
  providerId: string;

  // Solar notification fields
  solarDate?: string; // ISO date string

  // Lunar notification fields
  lunarDate?: LunarDate;

  isAutoGenerated?: boolean;

  // Thêm field để control hiển thị tùy chỉnh ngày
  isCustomDateEnabled?: boolean;

  // Thêm field để control nhắc lại hàng năm theo âm lịch
  isYearlyLunarRepeat?: boolean;
}

interface NotificationSettingsDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onBack: () => void;
  onComplete: () => void;
  templateData: EventTemplate | null;
  eventInfo: EventInfo;
}

export function NotificationSettingsDialog({
  isOpen,
  onClose,
  onBack,
  onComplete,
  templateData,
  eventInfo,
}: NotificationSettingsDialogProps) {
  const [notifications, setNotifications] = useState<NotificationSetting[]>([]);
  const [providers, setProviders] = useState<
    Array<{ id: string; name: string; is_default: boolean }>
  >([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const supabase = createClient();

  // Load providers
  useEffect(() => {
    (async () => {
      try {
        const {
          data: { user },
        } = await supabase.auth.getUser();
        if (!user) return;

        const { data, error } = await supabase
          .from("notification_providers")
          .select("id, name, is_default")
          .eq("user_id", user.id)
          .order("is_default", { ascending: false });

        if (!error && data) {
          setProviders(data);
        }
      } catch (e) {
        console.error("Load providers error", e);
      }
    })();
  }, [supabase]);

  // Auto-generate notifications từ template
  useEffect(() => {
    if (isOpen && templateData && eventInfo && providers.length > 0) {
      generateNotifications();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isOpen, templateData, eventInfo, providers]);

  const generateNotifications = () => {
    const defaultProvider = providers.find((p) => p.is_default);
    const defaultProviderId = defaultProvider?.id || "";
    const generatedNotifications: NotificationSetting[] = [];

    // 🚫 KHÔNG tạo main notification mặc định nữa để tránh confuse
    // Main notification sẽ để user tự tạo nếu muốn

    // ✅ VẪN tạo template notifications theo template đã chọn
    if (templateData?.notifySettings) {
      templateData.notifySettings.forEach((templateNotif) => {
        // 🔴 MỚI: Dùng trực tiếp advanceDays từ template, không cộng thêm preferredAdvanceDays
        generatedNotifications.push({
          type: eventInfo.isLunar ? "lunar" : "solar",
          advanceDays: templateNotif.advanceDays,
          note: templateNotif.note || `${eventInfo.title}`,
          providerId: defaultProviderId,
          solarDate: eventInfo.isLunar ? undefined : eventInfo.solarDate,
          lunarDate: eventInfo.isLunar
            ? {
                day: Number(eventInfo.lunarDay),
                month: Number(eventInfo.lunarMonth),
                year: eventInfo.lunarYear
                  ? Number(eventInfo.lunarYear)
                  : new Date().getFullYear(),
                isLeapMonth: eventInfo.isLeapMonth,
              }
            : undefined,
          isAutoGenerated: true,
          isCustomDateEnabled: false,
          // 🔴 Dùng setting từ template, fallback về setting event
          isYearlyLunarRepeat:
            templateNotif.isYearlyLunarRepeat !== undefined
              ? templateNotif.isYearlyLunarRepeat
              : eventInfo.isLunar && eventInfo.repeatYearly,
        });
      });
    }

    setNotifications(generatedNotifications);
  };

  // Thêm notification mới
  const addNotification = () => {
    const defaultProvider = providers.find((p) => p.is_default);
    const today = new Date();
    const currentLunar = LunarService.getTodayLunarDate();

    setNotifications((prev) => [
      ...prev,
      {
        type: "solar" as NotificationType, // Mặc định solar
        advanceDays: 1,
        note: "",
        providerId: defaultProvider?.id || "",
        solarDate: today.toISOString().split("T")[0],
        lunarDate: {
          ...currentLunar,
          isLeapMonth: currentLunar.isLeapMonth || false,
        },
        isAutoGenerated: false,
        isCustomDateEnabled: false, // Mặc định tắt tùy chỉnh ngày
        isYearlyLunarRepeat: false, // Mặc định tắt lặp lại hàng năm
      },
    ]);
  };

  // Nhân bản notification
  const duplicateNotification = (index: number) => {
    const notification = notifications[index];
    setNotifications((prev) => [
      ...prev,
      {
        ...notification,
        isAutoGenerated: false,
        isCustomDateEnabled: notification.isCustomDateEnabled || false, // Copy setting tùy chỉnh
        isYearlyLunarRepeat: notification.isYearlyLunarRepeat || false, // Copy setting lặp lại
      },
    ]);
  };

  // Xóa notification
  const removeNotification = (index: number) => {
    setNotifications((prev) => prev.filter((_, i) => i !== index));
  };

  // Calculate notification date để preview
  const calculateNotificationDate = (
    notification: NotificationSetting
  ): Date => {
    let baseDate: Date;

    // Nếu không bật tùy chỉnh ngày, dùng ngày gốc của event với logic thông minh
    if (!notification.isCustomDateEnabled) {
      // 🔴 MỚI: Sử dụng hàm calculateNotificationBaseDate với logic 4 trường hợp
      baseDate = LunarService.calculateNotificationBaseDate(
        eventInfo,
        notification.isYearlyLunarRepeat || false
      );
    } else {
      // Dùng ngày tùy chỉnh - logic tương tự nhưng với custom event info
      if (notification.type === "solar") {
        if (notification.solarDate) {
          const customEventInfo = {
            isLunar: false,
            lunarDay: "" as const,
            lunarMonth: "" as const,
            lunarYear: "" as const,
            isLeapMonth: false,
            solarDate: notification.solarDate,
          };
          baseDate = LunarService.calculateNotificationBaseDate(
            customEventInfo,
            notification.isYearlyLunarRepeat || false
          );
        } else {
          baseDate = new Date();
        }
      } else {
        // Lunar notification với custom date
        const lunarDate = notification.lunarDate;
        if (lunarDate && lunarDate.day && lunarDate.month) {
          const customEventInfo = {
            isLunar: true,
            lunarDay: lunarDate.day,
            lunarMonth: lunarDate.month,
            lunarYear: lunarDate.year || new Date().getFullYear(),
            isLeapMonth: lunarDate.isLeapMonth || false,
            solarDate: "",
          };
          baseDate = LunarService.calculateNotificationBaseDate(
            customEventInfo,
            notification.isYearlyLunarRepeat || false
          );
        } else {
          baseDate = new Date();
        }
      }
    }

    // ⚠️ Logic mới:
    // - advanceDays dương (+): nhắc trước sự kiện → baseDate - advanceDays
    // - advanceDays âm (-): nhắc sau sự kiện → baseDate - (-advanceDays) = baseDate + advanceDays
    // - advanceDays = 0: nhắc đúng ngày sự kiện → baseDate
    return addDays(baseDate, -notification.advanceDays);
  };

  const handleSave = async () => {
    setError(null);
    setLoading(true);

    const {
      data: { user },
    } = await supabase.auth.getUser();

    if (!user) {
      setError("Cần đăng nhập");
      setLoading(false);
      return;
    }

    try {
      // Create main event (từ eventInfo)
      const eventPayload: any = {
        user_id: user.id,
        title: eventInfo.title,
        description: eventInfo.description || null,
        event_type: eventInfo.isLunar ? "lunar" : "solar",
      };

      if (eventInfo.isLunar) {
        eventPayload.lunar_day = Number(eventInfo.lunarDay);
        eventPayload.lunar_month = Number(eventInfo.lunarMonth);
        eventPayload.lunar_year = eventInfo.lunarYear
          ? Number(eventInfo.lunarYear)
          : null;
        eventPayload.is_leap_month = eventInfo.isLeapMonth;

        // Pre-convert solar date cho lunar event
        try {
          const solarDate = LunarService.convertLunarToSolar(
            Number(eventInfo.lunarDay),
            Number(eventInfo.lunarMonth),
            eventInfo.lunarYear
              ? Number(eventInfo.lunarYear)
              : new Date().getFullYear(),
            eventInfo.isLeapMonth
          );
          eventPayload.solar_converted_date = solarDate
            .toISOString()
            .split("T")[0];
          eventPayload.conversion_metadata = {
            source_lunar: {
              day: Number(eventInfo.lunarDay),
              month: Number(eventInfo.lunarMonth),
              is_leap_month: eventInfo.isLeapMonth,
            },
            converted_for_year: new Date().getFullYear(),
            converted_at: new Date().toISOString(),
            is_valid: true,
          };
        } catch (error) {
          console.error("Lỗi convert lunar to solar:", error);
        }
      } else {
        eventPayload.solar_date = eventInfo.solarDate;
      }

      const { data: eventData, error: eventError } = await supabase
        .from("events")
        .insert(eventPayload)
        .select("id")
        .single();

      if (eventError) {
        setError(eventError.message);
        setLoading(false);
        return;
      }

      // Create notification events riêng cho mỗi notification setting
      const eventId = eventData.id;

      for (const notification of notifications) {
        if (notification.providerId) {
          // Tạo notification event riêng cho mỗi notification
          let notificationEventPayload: any = {
            user_id: user.id,
            title: `🔔 ${notification.note || eventInfo.title}`,
            description: `Thông báo cho: ${eventInfo.title}`,
            event_type: notification.type,
            preferred_advance_days: 0, // Notification event không cần advance
          };

          if (notification.type === "solar") {
            notificationEventPayload.solar_date = notification.solarDate;
          } else {
            const lunarDate = notification.lunarDate!;
            notificationEventPayload.lunar_day = lunarDate.day;
            notificationEventPayload.lunar_month = lunarDate.month;
            notificationEventPayload.lunar_year = lunarDate.year;
            notificationEventPayload.is_leap_month = lunarDate.isLeapMonth;

            // Pre-convert cho lunar notification
            try {
              const solarDate = LunarService.convertLunarToSolar(
                lunarDate.day,
                lunarDate.month,
                lunarDate.year,
                lunarDate.isLeapMonth
              );
              notificationEventPayload.solar_converted_date = solarDate
                .toISOString()
                .split("T")[0];
              notificationEventPayload.conversion_metadata = {
                source_lunar: {
                  day: lunarDate.day,
                  month: lunarDate.month,
                  is_leap_month: lunarDate.isLeapMonth,
                },
                converted_for_year: new Date().getFullYear(),
                converted_at: new Date().toISOString(),
                is_valid: true,
              };
            } catch (error) {
              console.error("Lỗi convert notification lunar to solar:", error);
            }
          }

          const { data: notificationEventData, error: notificationEventError } =
            await supabase
              .from("events")
              .insert(notificationEventPayload)
              .select("id")
              .single();

          if (!notificationEventError && notificationEventData) {
            // Tạo notification setting link tới notification event
            await supabase.from("notification_settings").insert({
              user_id: user.id,
              event_id: notificationEventData.id,
              channel: "app", // Default channel
              advance_days: 0, // Notification event sẽ trigger đúng ngày
              provider_id: notification.providerId,
              note: notification.note || null,
              lunar_repeat_yearly: notification.isYearlyLunarRepeat || false, // Lưu setting lặp lại vào notification_settings
            });
          }
        }
      }

      toast.success("Đã tạo sự kiện và thông báo thành công!");
      onComplete();
    } catch (error) {
      console.error("Error saving:", error);
      setError("Đã có lỗi xảy ra khi lưu");
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card
        className="rounded-lg shadow-xl w-full max-w-5xl max-h-[90vh] overflow-y-auto"
        onClick={(e) => e.stopPropagation()}
      >
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-3 text-2xl text-purple-800 dark:text-purple-500">
              <Clock className="h-8 w-8 text-purple-600 dark:text-purple-400" />
              <span>Cài đặt thông báo</span>
            </CardTitle>
            <button
              onClick={onClose}
              className="text-muted-foreground hover:text-foreground p-1 rounded-full hover:bg-accent"
            >
              ✕
            </button>
          </div>

          <div className="mt-4 flex items-center justify-center gap-2">
            <div className="w-3 h-3 rounded-full bg-green-500"></div>
            <div className="w-8 h-1 bg-green-500"></div>
            <div className="w-3 h-3 rounded-full bg-green-500"></div>
            <div className="w-8 h-1 bg-purple-500"></div>
            <div className="w-3 h-3 rounded-full bg-purple-500"></div>
            <div className="text-xs text-muted-foreground ml-2">
              Bước 3/3: Cài đặt thông báo
            </div>
          </div>

          <div className="mt-4 p-4 bg-muted/50 rounded-lg">
            <h4 className="font-medium text-foreground mb-2">
              📅 Sự kiện: {eventInfo.title}
            </h4>
            <div className="text-sm text-muted-foreground space-y-2">
              {eventInfo.isLunar ? (
                <>
                  <div className="flex items-center gap-2">
                    <span>🌙</span>
                    <span>
                      Ngày {eventInfo.lunarDay}/{eventInfo.lunarMonth} Âm lịch{" "}
                      {eventInfo.lunarYear && `năm ${eventInfo.lunarYear}`}
                      {eventInfo.isLeapMonth && " (nhuận)"}
                    </span>
                  </div>
                  {/* Hiển thị ngày dương tương đương */}
                  {(() => {
                    try {
                      const solarConverted = LunarService.convertLunarToSolar(
                        Number(eventInfo.lunarDay),
                        Number(eventInfo.lunarMonth),
                        eventInfo.lunarYear
                          ? Number(eventInfo.lunarYear)
                          : new Date().getFullYear(),
                        eventInfo.isLeapMonth || false
                      );
                      return (
                        <div className="flex items-center gap-2 text-xs text-blue-600 dark:text-blue-400 ml-6">
                          <span>↳ ☀️</span>
                          <span>
                            Tương đương: {format(solarConverted, "dd/MM/yyyy")}{" "}
                            Dương lịch
                          </span>
                        </div>
                      );
                    } catch {
                      return (
                        <div className="flex items-center gap-2 text-xs text-orange-600 dark:text-orange-400 ml-6">
                          <span>⚠️</span>
                          <span>Không thể chuyển đổi sang dương lịch</span>
                        </div>
                      );
                    }
                  })()}
                </>
              ) : (
                <>
                  <div className="flex items-center gap-2">
                    <span>☀️</span>
                    <span>
                      Ngày {format(new Date(eventInfo.solarDate), "dd/MM/yyyy")}{" "}
                      Dương lịch
                    </span>
                  </div>
                  {/* Hiển thị ngày âm tương đương */}
                  {(() => {
                    try {
                      const lunarConverted = LunarService.convertSolarToLunar(
                        new Date(eventInfo.solarDate)
                      );
                      return (
                        <div className="flex items-center gap-2 text-xs text-purple-600 dark:text-purple-400 ml-6">
                          <span>↳ 🌙</span>
                          <span>
                            Tương đương: {lunarConverted.day}/
                            {lunarConverted.month} Âm lịch
                            {lunarConverted.isLeapMonth ? " (nhuận)" : ""}
                          </span>
                        </div>
                      );
                    } catch {
                      return (
                        <div className="flex items-center gap-2 text-xs text-orange-600 dark:text-orange-400 ml-6">
                          <span>⚠️</span>
                          <span>Không thể chuyển đổi sang âm lịch</span>
                        </div>
                      );
                    }
                  })()}
                </>
              )}

              <div className="pt-1 border-t border-muted/50">
                <p>
                  📡 Kênh thông báo:{" "}
                  {providers.find((p) => p.is_default)?.name ||
                    "Chưa có kênh thông báo nào"}
                </p>
              </div>
            </div>
          </div>
        </CardHeader>

        <CardContent>
          <div className="space-y-6">
            <div className="p-3 bg-purple-50 dark:bg-purple-950 rounded-lg border-l-4 border-purple-400 dark:border-purple-600">
              <div className="flex items-start gap-2">
                <Info className="h-4 w-4 text-purple-600 dark:text-purple-400 mt-0.5 flex-shrink-0" />
                <div className="text-sm text-purple-800 dark:text-purple-200">
                  <p className="font-medium">Thông báo linh hoạt</p>
                  <p className="text-xs mt-1">
                    Mỗi thông báo có thể là dương lịch (ngày cố định) hoặc âm
                    lịch (lặp hàng năm theo âm lịch).
                  </p>
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h3 className="font-medium text-foreground">
                  Danh sách thông báo sẽ được tạo
                </h3>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={addNotification}
                  className="flex items-center gap-2"
                >
                  <Plus className="h-4 w-4" />
                  Thêm thông báo
                </Button>
              </div>

              {notifications.length === 0 ? (
                <div className="text-center py-12 text-muted-foreground">
                  <Clock className="h-16 w-16 mx-auto mb-4 opacity-30" />
                  <h3 className="text-lg font-medium mb-2">
                    {templateData
                      ? `Template "${templateData.name}" không có thông báo tự động`
                      : "Chưa có thông báo nào"}
                  </h3>
                  <p className="text-sm mb-4">
                    {templateData
                      ? "Bạn có thể tự tạo thông báo tùy chỉnh cho sự kiện này"
                      : "Bạn có thể tạo thông báo tùy chỉnh cho sự kiện này"}
                  </p>
                  <div className="inline-flex items-center gap-2 px-3 py-1 bg-purple-50 dark:bg-purple-950 rounded-lg text-purple-700 dark:text-purple-300 text-xs">
                    💡 Click "Thêm thông báo" để bắt đầu
                  </div>
                </div>
              ) : (
                notifications.map((notification, index) => {
                  const notificationDate =
                    calculateNotificationDate(notification);

                  return (
                    <div
                      key={index}
                      className="border rounded-md p-4 bg-purple-50/30 dark:bg-purple-950/20 border-purple-200 dark:border-purple-800 relative"
                    >
                      {/* Action buttons */}
                      <div className="absolute top-2 right-2 flex gap-1">
                        <button
                          type="button"
                          className="text-muted-foreground hover:text-foreground p-1 rounded hover:bg-accent"
                          onClick={() => duplicateNotification(index)}
                          title="Nhân bản thông báo này"
                        >
                          <Copy className="h-4 w-4" />
                        </button>
                        <button
                          type="button"
                          className="text-red-500 hover:text-red-600 dark:text-red-400 dark:hover:text-red-500 p-1 rounded hover:bg-accent"
                          onClick={() => removeNotification(index)}
                          title="Xóa thông báo này"
                        >
                          <Trash2 className="h-4 w-4" />
                        </button>
                      </div>

                      <div className="space-y-4 mt-6">
                        {/* Switch tùy chỉnh ngày */}
                        <div className="space-y-2">
                          <div className="flex items-center justify-between p-3 bg-muted/20 rounded-lg border">
                            <div className="flex items-center gap-2">
                              <Settings className="h-4 w-4 text-muted-foreground" />
                              <Label className="text-sm font-medium">
                                Tùy chỉnh ngày thông báo
                              </Label>
                            </div>
                            <label className="relative inline-flex items-center cursor-pointer">
                              <input
                                type="checkbox"
                                checked={
                                  notification.isCustomDateEnabled || false
                                }
                                onChange={(e) => {
                                  setNotifications((prev) => {
                                    const copy = [...prev];
                                    copy[index] = {
                                      ...copy[index],
                                      isCustomDateEnabled: e.target.checked,
                                    };
                                    return copy;
                                  });
                                }}
                                className="sr-only peer"
                              />
                              <div className="w-11 h-6 bg-input peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-background after:border-border after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600"></div>
                            </label>
                          </div>

                          {!notification.isCustomDateEnabled && (
                            <p className="text-xs text-muted-foreground px-3">
                              📅 Thông báo này sẽ dựa vào ngày sự kiện gốc
                              {notification.advanceDays > 0
                                ? ` - ${notification.advanceDays} ngày (trước sự kiện)`
                                : notification.advanceDays < 0
                                  ? ` + ${Math.abs(notification.advanceDays)} ngày (sau sự kiện)`
                                  : " (đúng ngày sự kiện)"}
                            </p>
                          )}
                        </div>

                        {/* Switch nhắc lại hàng năm theo âm lịch */}
                        <div className="space-y-2">
                          <div className="flex items-center justify-between p-3 bg-red-50/30 dark:bg-red-950/20 rounded-lg border border-red-200 dark:border-red-800">
                            <div className="flex items-center gap-2">
                              <Calendar className="h-4 w-4 text-red-600 dark:text-red-400" />
                              <Label className="text-sm font-medium">
                                Nhắc lại hàng năm theo âm lịch
                              </Label>
                            </div>
                            <label className="relative inline-flex items-center cursor-pointer">
                              <input
                                type="checkbox"
                                checked={
                                  notification.isYearlyLunarRepeat || false
                                }
                                onChange={(e) => {
                                  setNotifications((prev) => {
                                    const copy = [...prev];
                                    copy[index] = {
                                      ...copy[index],
                                      isYearlyLunarRepeat: e.target.checked,
                                    };
                                    return copy;
                                  });
                                }}
                                className="sr-only peer"
                              />
                              <div className="w-11 h-6 bg-input peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-red-300 dark:peer-focus:ring-red-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-background after:border-border after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-600"></div>
                            </label>
                          </div>

                          {notification.isYearlyLunarRepeat && (
                            <p className="text-xs text-red-600 dark:text-red-400 px-3">
                              🌙 Thông báo này sẽ lặp lại hàng năm theo âm lịch
                              tự động. Ngày thông báo kế tiếp sẽ được thêm vào
                              thông báo nhận được.
                            </p>
                          )}

                          {!notification.isYearlyLunarRepeat && (
                            <p className="text-xs text-muted-foreground px-3">
                              📅 Thông báo này chỉ diễn ra 1 lần như preview.
                            </p>
                          )}
                        </div>

                        {/* Hiển thị UnifiedDatePicker khi được bật */}
                        {notification.isCustomDateEnabled && (
                          <UnifiedDatePicker
                            isLunar={notification.type === "lunar"}
                            onToggleLunar={(isLunar) => {
                              setNotifications((prev) => {
                                const copy = [...prev];
                                copy[index] = {
                                  ...copy[index],
                                  type: isLunar ? "lunar" : "solar",
                                };
                                return copy;
                              });
                            }}
                            solarDate={notification.solarDate || ""}
                            onSolarDateChange={(date) => {
                              setNotifications((prev) => {
                                const copy = [...prev];
                                copy[index] = {
                                  ...copy[index],
                                  solarDate: date,
                                };
                                return copy;
                              });
                            }}
                            lunarDate={{
                              day: notification.lunarDate?.day || 1,
                              month: notification.lunarDate?.month || 1,
                              year:
                                notification.lunarDate?.year ||
                                new Date().getFullYear(),
                              isLeapMonth:
                                notification.lunarDate?.isLeapMonth || false,
                            }}
                            onLunarDateChange={(lunarDate) => {
                              setNotifications((prev) => {
                                const copy = [...prev];
                                copy[index] = {
                                  ...copy[index],
                                  lunarDate: {
                                    day: lunarDate.day,
                                    month: lunarDate.month,
                                    year: lunarDate.year,
                                    isLeapMonth: lunarDate.isLeapMonth || false,
                                  },
                                };
                                return copy;
                              });
                            }}
                            showGuidance={false}
                            showPreview={true}
                          />
                        )}

                        {/* Advance days */}
                        <div className="space-y-2">
                          <div className="flex items-center gap-4">
                            <Label className="text-sm font-medium">
                              Nhắc trước/sau:
                            </Label>
                            <div className="flex items-center gap-2">
                              <Input
                                type="number"
                                value={notification.advanceDays}
                                onChange={(e) => {
                                  const newValue = Number(e.target.value);
                                  setNotifications((prev) => {
                                    const copy = [...prev];
                                    copy[index] = {
                                      ...copy[index],
                                      advanceDays: newValue,
                                    };
                                    return copy;
                                  });
                                }}
                                className="w-20 h-8"
                                placeholder="0"
                              />
                              <span className="text-sm text-muted-foreground">
                                ngày
                              </span>
                            </div>
                          </div>

                          {/* Chú thích cho advance days */}
                          <div className="text-xs text-muted-foreground px-3 space-y-1">
                            <div className="flex items-center gap-2">
                              <span>💡</span>
                              <span>
                                <strong>Số dương (+)</strong>: Nhắc trước ngày
                                sự kiện
                              </span>
                            </div>
                            <div className="flex items-center gap-2 ml-6">
                              <span>📅</span>
                              <span>Ví dụ: +3 = nhắc trước 3 ngày</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <span>🔔</span>
                              <span>
                                <strong>Số âm (-)</strong>: Nhắc sau ngày sự
                                kiện
                              </span>
                            </div>
                            <div className="flex items-center gap-2 ml-6">
                              <span>📅</span>
                              <span>
                                Ví dụ: -7 = nhắc sau 7 ngày (giỗ lần thứ 7)
                              </span>
                            </div>
                            <div className="flex items-center gap-2">
                              <span>🎯</span>
                              <span>
                                <strong>Số 0</strong>: Nhắc đúng ngày sự kiện
                              </span>
                            </div>
                          </div>
                        </div>

                        {/* Preview notification date */}
                        <div className="p-3 bg-muted/30 rounded-lg">
                          <p className="text-sm text-muted-foreground">
                            {notification.advanceDays > 0 ? (
                              <>
                                🔔 Sẽ nhắc trước {notification.advanceDays} ngày
                                vào:{" "}
                              </>
                            ) : notification.advanceDays < 0 ? (
                              <>
                                🔔 Sẽ nhắc sau{" "}
                                {Math.abs(notification.advanceDays)} ngày
                                vào:{" "}
                              </>
                            ) : (
                              <>🔔 Sẽ nhắc đúng ngày sự kiện vào: </>
                            )}
                            <span className="font-medium text-foreground">
                              {format(notificationDate, "dd/MM/yyyy")}
                            </span>
                          </p>

                          {/* Hiển thị ngày tương đương (âm/dương) cho notification date */}
                          <div className="mt-1 text-xs text-muted-foreground ml-6">
                            {(() => {
                              try {
                                const lunarConverted =
                                  LunarService.convertSolarToLunar(
                                    notificationDate
                                  );
                                return (
                                  <div className="flex items-center gap-2 text-purple-600 dark:text-purple-400">
                                    <span>↳ 🌙</span>
                                    <span>
                                      Tương đương: {lunarConverted.day}/
                                      {lunarConverted.month} Âm lịch
                                      {lunarConverted.isLeapMonth
                                        ? " (nhuận)"
                                        : ""}
                                    </span>
                                  </div>
                                );
                              } catch {
                                return (
                                  <div className="flex items-center gap-2 text-orange-600 dark:text-orange-400">
                                    <span>⚠️</span>
                                    <span>
                                      Không thể chuyển đổi sang âm lịch
                                    </span>
                                  </div>
                                );
                              }
                            })()}
                          </div>

                          {/* Hint text về logic tính toán */}
                          <div className="mt-2 text-xs text-muted-foreground space-y-1">
                            {!notification.isCustomDateEnabled ? (
                              // Logic cho event date gốc
                              <>
                                {eventInfo.isLunar ? (
                                  notification.isYearlyLunarRepeat ? (
                                    <p className="flex items-center gap-1">
                                      <span>🌙</span>
                                      <span>
                                        Lặp lại hàng năm → dùng ngày âm sắp đến
                                        (không nhuận)
                                      </span>
                                    </p>
                                  ) : (
                                    <p className="flex items-center gap-1">
                                      <span>🗓️</span>
                                      <span>
                                        Không lặp lại → dùng ngày dương đã
                                        convert
                                      </span>
                                    </p>
                                  )
                                ) : notification.isYearlyLunarRepeat ? (
                                  <p className="flex items-center gap-1">
                                    <span>🔄</span>
                                    <span>
                                      Lặp lại hàng năm → convert sang âm rồi
                                      tính gần nhất
                                    </span>
                                  </p>
                                ) : (
                                  <p className="flex items-center gap-1">
                                    <span>📅</span>
                                    <span>
                                      Không lặp lại → dùng ngày dương gốc
                                    </span>
                                  </p>
                                )}
                              </>
                            ) : (
                              // Logic cho custom date
                              <p className="flex items-center gap-1">
                                <span>⚙️</span>
                                <span>Ngày tùy chỉnh với logic tương tự</span>
                              </p>
                            )}
                          </div>
                        </div>

                        {/* Note input */}
                        <div>
                          <Label className="text-sm font-medium">
                            Ghi chú thông báo:
                          </Label>
                          <Input
                            value={notification.note}
                            onChange={(e) => {
                              setNotifications((prev) => {
                                const copy = [...prev];
                                copy[index] = {
                                  ...copy[index],
                                  note: e.target.value,
                                };
                                return copy;
                              });
                            }}
                            placeholder="Ví dụ: Đừng quên mua hoa, bánh chưng..."
                            className="mt-1"
                          />
                        </div>
                      </div>
                    </div>
                  );
                })
              )}
            </div>

            {error && <p className="text-sm text-red-500">{error}</p>}

            <div className="flex gap-3 pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={onBack}
                className="flex-1"
                disabled={loading}
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                Quay lại
              </Button>
              <Button
                type="button"
                onClick={handleSave}
                className="flex-1"
                disabled={loading}
              >
                <Save className="h-4 w-4 mr-2" />
                {loading ? "Đang lưu..." : "Hoàn thành"}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
