"use client";

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  HeartCrack,
  FolderHeart,
  Sunrise,
  PlusCircle,
  ArrowRight,
  X,
} from "lucide-react";
import { useState } from "react";

/**
 * ƒê·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu cho m·ªôt m·∫´u s·ª± ki·ªán.
 * Adapted to match new simplified structure
 */
export interface EventTemplate {
  id: string; // "death-anniversary", "funeral", etc.
  name: string; // "Ng√†y gi·ªó", "Tang l·ªÖ"
  description: string; // M√¥ t·∫£ ng·∫Øn g·ªçn
  longDescription: string; // M√¥ t·∫£ chi ti·∫øt khi ƒë∆∞·ª£c ch·ªçn
  icon: React.ElementType; // Icon t·ª´ lucide-react

  // Direct properties (simplified from config)
  isLunar: boolean;

  // Advanced settings (optional)
  setDateToToday?: boolean; // C·ªù ƒë·ªÉ bi·∫øt c√≥ c·∫ßn ƒë·∫∑t ng√†y l√† h√¥m nay kh√¥ng
  repeatYearly?: boolean;

  // C√†i ƒë·∫∑t th√¥ng b√°o m·∫∑c ƒë·ªãnh cho template
  notifySettings?: Array<{
    advanceDays: number; // S·∫Ω d√πng s·ªë √¢m ƒë·ªÉ ch·ªâ "ng√†y sau ƒë√≥"
    note?: string;
    // üî¥ M·ªöI: Th√™m setting nh·∫Øc l·∫°i h√†ng nƒÉm theo √¢m l·ªãch cho t·ª´ng notification
    isYearlyLunarRepeat?: boolean; // Default false n·∫øu kh√¥ng c√≥
  }>;
}

/**
 * Danh s√°ch c√°c m·∫´u s·ª± ki·ªán c√≥ s·∫µn.
 */
export const eventTemplates: EventTemplate[] = [
  {
    id: "death-anniversary",
    name: "Ng√†y gi·ªó",
    description: "Nh·∫Øc nh·ªü ng√†y gi·ªó h√†ng nƒÉm",
    longDescription: `‚ÑπÔ∏è M·∫´u ph·ªï bi·∫øn nh·∫•t - T·ª± ƒë·ªông t·∫°o nh·∫Øc nh·ªü cho ng√†y gi·ªó theo truy·ªÅn th·ªëng Vi·ªát Nam, l·∫∑p l·∫°i h√†ng nƒÉm theo ng√†y √¢m.
‚ÑπÔ∏è Nh·∫Øc tr∆∞·ªõc 3 ng√†y (nh·∫Øc l·∫°i h√†ng nƒÉm).
‚ÑπÔ∏è Nh·∫Øc tr∆∞·ªõc 1 ng√†y (nh·∫Øc l·∫°i h√†ng nƒÉm).`,
    icon: FolderHeart,
    isLunar: true,
    repeatYearly: true,
    notifySettings: [
      {
        advanceDays: 3,
        note: "C√≤n 3 ng√†y n·ªØa l√† ng√†y gi·ªó c·ªßa [T√™n ng∆∞·ªùi gi·ªó]",
        isYearlyLunarRepeat: true, // üî¥ Chu·∫©n b·ªã c≈©ng l·∫∑p l·∫°i h√†ng nƒÉm
      },
      {
        advanceDays: 1,
        note: "Ng√†y mai l√† ng√†y gi·ªó c·ªßa [T√™n ng∆∞·ªùi gi·ªó]",
        isYearlyLunarRepeat: true, // üî¥ Ng√†y gi·ªó l·∫∑p l·∫°i h√†ng nƒÉm
      },
    ],
  },
  {
    id: "funeral",
    name: "Tang l·ªÖ",
    description:
      "Bao g·ªìm nh·∫Øc nh·ªü c√°c l·ªÖ c√∫ng c∆°m truy·ªÅn th·ªëng t√≠nh theo ng√†y m·∫•t: 7, 49, 100 ng√†y v√† ng√†y gi·ªó h√†ng nƒÉm",
    longDescription: `‚ÑπÔ∏è M·∫´u t·ª± ƒë·ªông t·∫°o nh·∫Øc nh·ªü cho c√°c l·ªÖ c√∫ng c∆°m truy·ªÅn th·ªëng t√≠nh theo ng√†y m·∫•t (m√† b·∫°n s·∫Ω ch·ªçn): 7, 49, 100 ng√†y (ch∆∞a tr·ª´ theo s·ªë ng√†y nh·∫Øc tr∆∞·ªõc b·∫°n s·∫Ω ch·ªçn).
‚ÑπÔ∏è T√πy theo ƒë·ªãa ph∆∞∆°ng v√† truy·ªÅn th·ªëng gia ƒë√¨nh, c√°c b·∫°n c√≥ th·ªÉ t·∫°o th√™m c√°c nh·∫Øc nh·ªü ph√π h·ª£p nh√©.
‚ÑπÔ∏è Nh·∫Øc nh·ªü l·ªÖ c√∫ng 7 ng√†y, 49 ng√†y, 100 ng√†y (kh√¥ng nh·∫Øc l·∫°i) - nh·∫Øc tr∆∞·ªõc 1 ng√†y.
‚ÑπÔ∏è Nh·∫Øc nh·ªü l·ªÖ ng√†y gi·ªó (nh·∫Øc l·∫°i h√†ng nƒÉm) - nh·∫Øc tr∆∞·ªõc 1 ng√†y.`,
    icon: HeartCrack,
    isLunar: true,
    setDateToToday: false,
    repeatYearly: false,
    notifySettings: [
      {
        advanceDays: -6,
        note: "Ng√†y mai l√† l·ªÖ c√∫ng 7 ng√†y",
        isYearlyLunarRepeat: false, // üî¥ Tang l·ªÖ KH√îNG l·∫∑p l·∫°i h√†ng nƒÉm
      },
      {
        advanceDays: -48,
        note: "Ng√†y mai l√† l·ªÖ c√∫ng 49 ng√†y",
        isYearlyLunarRepeat: false, // üî¥ Tang l·ªÖ KH√îNG l·∫∑p l·∫°i h√†ng nƒÉm
      },
      {
        advanceDays: -99,
        note: "Ng√†y mai l√† l·ªÖ c√∫ng 100 ng√†y (T·ªët kh·ªëc)",
        isYearlyLunarRepeat: false, // üî¥ Tang l·ªÖ KH√îNG l·∫∑p l·∫°i h√†ng nƒÉm
      },
      {
        advanceDays: 1,
        note: "Ng√†y mai l√† ng√†y gi·ªó c·ªßa [T√™n ng∆∞·ªùi gi·ªó]",
        isYearlyLunarRepeat: true, // üî¥ Ng√†y gi·ªó l·∫∑p l·∫°i h√†ng nƒÉm
      },
    ],
  },
  {
    id: "newborn",
    name: "Em b√© ch√†o ƒë·ªùi",
    description: "Theo d√µi t·ª´ sinh ‚Üí ƒë·∫ßy th√°ng ‚Üí sinh nh·∫≠t ƒë·∫ßu ti√™n",
    longDescription: `‚ÑπÔ∏è M·∫´u t·ª± ƒë·ªông t·∫°o nh·∫Øc nh·ªü cho ng√†y ƒë·∫ßy th√°ng v√† th√¥i n√¥i cho em b√© v·ª´a sinh ra theo truy·ªÅn th·ªëng Vi·ªát Nam.
‚ÑπÔ∏è Nh·∫Øc nh·ªü ƒë·∫ßy th√°ng (kh√¥ng nh·∫Øc l·∫°i).
‚ÑπÔ∏è Nh·∫Øc nh·ªü th√¥i n√¥i (kh√¥ng nh·∫Øc l·∫°i).
‚ö†Ô∏è L∆∞u √Ω v·ªÅ ƒë·∫ßy th√°ng cho b√© trai v√† b√© g√°i, t√πy theo ƒë·ªãa ph∆∞∆°ng v√† theo phong t·ª•c truy·ªÅn th·ªëng: m·∫´u s·∫Ω t·∫°o nh·∫Øc nh·ªü ƒë·∫ßy th√°ng cho b√© sau sinh 30 ng√†y, b·∫°n t·ª± ƒëi·ªÅu ch·ªânh ƒë·ªÉ ph√π h·ª£p nhu c·∫ßu nh√©.`,
    icon: Sunrise,
    isLunar: false, // Th∆∞·ªùng d√πng d∆∞∆°ng l·ªãch
    setDateToToday: true, // M·∫∑c ƒë·ªãnh h√¥m nay
    repeatYearly: true, // ƒê·ªÉ nh·∫Øc sinh nh·∫≠t h√†ng nƒÉm
    notifySettings: [
      {
        advanceDays: 29,
        note: "Ng√†y mai l√† ng√†y ƒë·∫ßy th√°ng c·ªßa b√© [T√™n b√©]",
        isYearlyLunarRepeat: false, // üî¥ ƒê·∫ßy th√°ng ch·ªâ 1 l·∫ßn
      },
      {
        advanceDays: 1,
        note: "Ng√†y mai l√† th√¥i n√¥i c·ªßa b√© [T√™n b√©]",
        isYearlyLunarRepeat: true, // üî¥ Sinh nh·∫≠t l·∫∑p l·∫°i h√†ng nƒÉm (d∆∞∆°ng l·ªãch)
      },
    ],
  },
];

interface TemplateSelectionDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSelect: (template: EventTemplate | null) => void; // null khi t·∫°o t√πy ch·ªânh
}

/**
 * Dialog ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn m·ªôt m·∫´u s·ª± ki·ªán c√≥ s·∫µn ho·∫∑c t·∫°o m·ªõi.
 */
export function TemplateSelectionDialog({
  isOpen,
  onClose,
  onSelect,
}: TemplateSelectionDialogProps) {
  // State ƒë·ªÉ qu·∫£n l√Ω template ƒë∆∞·ª£c ch·ªçn v√† hi·ªÉn th·ªã long description
  const [selectedTemplate, setSelectedTemplate] =
    useState<EventTemplate | null>(eventTemplates[0]); // Default select "Ng√†y gi·ªó"
  const [isCustomSelected, setIsCustomSelected] = useState(false);

  if (!isOpen) return null;

  // Handler khi click v√†o m·ªôt template
  const handleTemplateClick = (template: EventTemplate) => {
    setSelectedTemplate(template);
    setIsCustomSelected(false);
  };

  // Handler khi click v√†o "T·∫°o t√πy ch·ªânh"
  const handleCustomClick = () => {
    setSelectedTemplate(null);
    setIsCustomSelected(true);
  };

  // Handler cho n√∫t Next
  const handleNext = () => {
    if (selectedTemplate) {
      onSelect(selectedTemplate);
    } else if (isCustomSelected) {
      onSelect(null);
    }
  };

  return (
    <div
      className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4"
      onClick={onClose}
    >
      <Card
        className="rounded-lg shadow-xl w-full max-w-6xl max-h-[90vh] overflow-y-auto"
        onClick={(e) => e.stopPropagation()}
      >
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-3 text-2xl text-green-800 dark:text-green-500">
              <PlusCircle className="h-8 w-8 text-green-600 dark:text-green-400" />
              <span>Ch·ªçn lo·∫°i s·ª± ki·ªán</span>
            </CardTitle>
            <button
              onClick={onClose}
              className="text-muted-foreground hover:text-foreground p-1 rounded-full hover:bg-accent"
            >
              ‚úï
            </button>
          </div>
          <CardDescription className="mt-2">
            B·∫Øt ƒë·∫ßu nhanh h∆°n b·∫±ng c√°ch ch·ªçn m·ªôt m·∫´u c√≥ s·∫µn.
          </CardDescription>

          {/* Progress indicator */}
          <div className="mt-4 flex items-center justify-center gap-2">
            <div className="w-3 h-3 rounded-full bg-green-500"></div>
            <div className="w-8 h-1 bg-gray-300 dark:bg-gray-600"></div>
            <div className="w-3 h-3 rounded-full bg-gray-300 dark:bg-gray-600"></div>
            <div className="w-8 h-1 bg-gray-300 dark:bg-gray-600"></div>
            <div className="w-3 h-3 rounded-full bg-gray-300 dark:bg-gray-600"></div>
            <div className="text-xs text-muted-foreground ml-2">
              B∆∞·ªõc 1/3: Ch·ªçn template
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Template selection grid - 4 c·ªôt, 1 h√†ng */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            {/* Danh s√°ch c√°c template */}
            {eventTemplates.map((template) => (
              <div
                key={template.id}
                className={`border rounded-lg p-4 flex flex-col items-center justify-center text-center cursor-pointer transition-colors min-h-[160px] ${
                  selectedTemplate?.id === template.id
                    ? "border-primary bg-primary/5"
                    : "hover:bg-accent"
                }`}
                onClick={() => handleTemplateClick(template)}
              >
                <template.icon className="h-10 w-10 text-primary mb-2" />
                <h3 className="font-semibold text-base leading-tight">
                  {template.name}
                </h3>
                <p className="text-xs text-muted-foreground mt-2 leading-tight">
                  {template.description}
                </p>
              </div>
            ))}

            {/* L·ª±a ch·ªçn t·∫°o t√πy ch·ªânh */}
            <div
              className={`border-2 border-dashed rounded-lg p-4 flex flex-col items-center justify-center text-center cursor-pointer transition-colors min-h-[160px] ${
                isCustomSelected
                  ? "border-primary bg-primary/5"
                  : "border-primary/50 hover:bg-accent"
              }`}
              onClick={handleCustomClick}
            >
              <PlusCircle className="h-10 w-10 text-primary mb-2" />
              <h3 className="font-semibold text-base leading-tight">
                T·∫°o s·ª± ki·ªán t√πy ch·ªânh
              </h3>
              <p className="text-xs text-muted-foreground mt-2 leading-tight">
                B·∫Øt ƒë·∫ßu v·ªõi m·ªôt form tr·ªëng ƒë·ªÉ t·ª± thi·∫øt k·∫ø s·ª± ki·ªán.
              </p>
            </div>
          </div>

          {/* Long description section - hi·ªÉn th·ªã khi c√≥ template ƒë∆∞·ª£c ch·ªçn */}
          {selectedTemplate && (
            <div className="border rounded-lg p-6 bg-muted/30">
              <div className="flex items-center gap-3 mb-3">
                <selectedTemplate.icon className="h-6 w-6 text-primary" />
                <h4 className="font-semibold text-lg">
                  {selectedTemplate.name}
                </h4>
              </div>
              <p className="text-muted-foreground leading-relaxed whitespace-pre-wrap">
                {selectedTemplate.longDescription}
              </p>
            </div>
          )}

          {/* Custom selection description */}
          {isCustomSelected && (
            <div className="border rounded-lg p-6 bg-muted/30">
              <div className="flex items-center gap-3 mb-3">
                <PlusCircle className="h-6 w-6 text-primary" />
                <h4 className="font-semibold text-lg">T·∫°o s·ª± ki·ªán t√πy ch·ªânh</h4>
              </div>
              <p className="text-muted-foreground leading-relaxed whitespace-pre-wrap">
                B·∫°n s·∫Ω ƒë∆∞·ª£c ƒë∆∞a ƒë·∫øn form t·∫°o s·ª± ki·ªán tr·ªëng, n∆°i b·∫°n c√≥ th·ªÉ t·ª± do
                thi·∫øt k·∫ø s·ª± ki·ªán theo √Ω mu·ªën v·ªõi c√°c th√¥ng tin nh∆∞ t√™n s·ª± ki·ªán,
                ng√†y th√°ng, v√† c√†i ƒë·∫∑t th√¥ng b√°o ho√†n to√†n t√πy ch·ªânh.
              </p>
            </div>
          )}

          {/* Navigation buttons */}
          <div className="flex justify-between pt-4">
            <Button variant="outline" onClick={onClose}>
              H·ªßy b·ªè
            </Button>
            <Button
              onClick={handleNext}
              disabled={!selectedTemplate && !isCustomSelected}
              className="flex items-center gap-2"
            >
              Ti·∫øp theo
              <ArrowRight className="h-4 w-4" />
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
